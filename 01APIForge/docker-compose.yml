# API Factory Module - Docker Compose配置
# 支持开发、测试、生产三环境部署
# 包含API Factory、Redis、监控等服务

services:
  # API Factory 主服务
  api-factory:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-factory-${ENV:-dev}
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
      - "${ZMQ_PUB_PORT:-5555}:5555"
      - "${ZMQ_SUB_PORT:-5556}:5556"
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: ${CONTAINER_MEMORY_LIMIT:-512m}
          cpus: '${CONTAINER_CPU_LIMIT:-0.5}'
        reservations:
          memory: 256m
          cpus: '0.25'
    environment:
      - ENV=${ENV:-development}
      - API_TITLE=API Factory Module
      - API_VERSION=1.0.0
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # ZeroMQ配置
      - ZMQ_PUB_PORT=5555
      - ZMQ_SUB_PORT=5556
      - ZMQ_REQ_PORT=5557
      - ZMQ_REP_PORT=5558
      
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      
      # SQLite配置
      - SQLITE_DB_PATH=/app/data/api_factory.db
      
      # 认证配置
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-30}
      
      # API配额配置
      - DEFAULT_RATE_LIMIT=${DEFAULT_RATE_LIMIT:-100}
      - CIRCUIT_BREAKER_THRESHOLD=${CIRCUIT_BREAKER_THRESHOLD:-5}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
    networks:
      - api-factory-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: redis-${ENV:-dev}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.25'
        reservations:
          memory: 128m
          cpus: '0.1'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$$REDIS_PASSWORD" --appendonly yes
        else
          redis-server --appendonly yes
        fi
      '
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    networks:
      - api-factory-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: nginx-${ENV:-dev}
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api-factory
    networks:
      - api-factory-network
    profiles:
      - production

  # 监控服务 - Prometheus（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-${ENV:-dev}
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - api-factory-network
    profiles:
      - monitoring

  # 监控服务 - Grafana（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-${ENV:-dev}
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - api-factory-network
    profiles:
      - monitoring

# 网络配置
networks:
  api-factory-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# 数据卷配置
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local