[tool:pytest]
# pytest配置文件
# 统一管理测试设置、标记和执行参数

# 测试发现配置
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 输出配置
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    --cov=scanner
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --junitxml=test-results.xml

# 自定义标记
markers =
    unit: 单元测试 - 测试单个组件或函数
    integration: 集成测试 - 测试组件间的交互
    performance: 性能测试 - 测试系统性能和负载能力
    e2e: 端到端测试 - 测试完整的用户场景
    slow: 慢速测试 - 运行时间较长的测试
    redis: 需要Redis连接的测试
    zmq: 需要ZeroMQ的测试
    network: 需要网络连接的测试
    mock: 使用模拟对象的测试
    real: 使用真实服务的测试
    smoke: 冒烟测试 - 基本功能验证
    regression: 回归测试 - 验证修复的问题
    security: 安全测试 - 测试安全相关功能
    config: 配置测试 - 测试配置管理
    error: 错误处理测试 - 测试异常情况
    concurrent: 并发测试 - 测试并发场景

# 过滤警告
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:zmq.*
    ignore::UserWarning:redis.*
    ignore::RuntimeWarning:asyncio.*

# 异步测试配置
asyncio_mode = auto

# 日志配置
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# 最小Python版本
minversion = 3.8

# 测试超时（秒）
timeout = 300

# 并行测试配置
# 使用 pytest-xdist 插件时的配置
# addopts = -n auto  # 自动检测CPU核心数

# 测试数据目录
testmon_datafile = .testmondata

# 缓存配置
cache_dir = .pytest_cache

# 覆盖率配置
[coverage:run]
source = scanner
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml