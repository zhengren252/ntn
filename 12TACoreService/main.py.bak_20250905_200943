"""Main entry point for TACoreService."""

import os
import sys
import signal
import logging
import asyncio
import threading
from typing import Optional
from fastapi import FastAPI
from uvicorn import Config, Server

# Add project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from tacoreservice.config import get_settings
from tacoreservice.core.load_balancer import LoadBalancer
from tacoreservice.core.redis_manager import RedisManager
from tacoreservice.api.monitoring import MonitoringAPI
from tacoreservice.api.health import HealthAPI
from tacoreservice.monitoring.logger import setup_logging
from tacoreservice.monitoring.metrics import MetricsCollector


class TACoreService:
    """Main TACoreService application."""

    def __init__(self):
        self.settings = get_settings()
        self.logger = logging.getLogger(__name__)

        # Core components
        self.load_balancer: Optional[LoadBalancer] = None
        self.metrics_collector: Optional[MetricsCollector] = None
        self.redis_manager: Optional[RedisManager] = None

        # FastAPI app for monitoring
        self.app = FastAPI(
            title="TACoreService",
            description="High-performance AI trading core service",
            version="1.0.0",
        )

        # API components
        self.monitoring_api: Optional[MonitoringAPI] = None
        self.health_api: Optional[HealthAPI] = None

        # HTTP server
        self.http_server: Optional[Server] = None

        # Threading
        self.load_balancer_thread: Optional[threading.Thread] = None
        self.running = False

        self.logger.info("TACoreService initialized")

    def setup(self):
        """Setup all service components."""
        try:
            # Setup logging
            setup_logging()

            # Initialize Redis manager
            self.redis_manager = RedisManager()

            # Initialize metrics collector
            self.metrics_collector = MetricsCollector()

            # Initialize load balancer
            self.load_balancer = LoadBalancer()

            # Setup APIs
            self.monitoring_api = MonitoringAPI(self.app)
            self.health_api = HealthAPI(self.app)

            # Add Prometheus metrics endpoint
            @self.app.get("/metrics")
            async def prometheus_metrics():
                """Prometheus metrics endpoint."""
                if self.metrics_collector:
                    return self.metrics_collector.export_prometheus_metrics()
                return "# No metrics available\n"

            # Setup HTTP server
            config = Config(
                app=self.app,
                host=self.settings.http_host,
                port=self.settings.http_port,
                log_level="info" if self.settings.debug else "warning",
            )
            self.http_server = Server(config)

            self.logger.info("TACoreService setup completed")

        except Exception as e:
            self.logger.error(f"Failed to setup TACoreService: {e}")
            raise

    async def start(self):
        """Start the service."""
        try:
            self.running = True

            # Test Redis connection
            if self.redis_manager:
                if self.redis_manager.test_connection():
                    self.logger.info("Redis connection established")
                else:
                    self.logger.warning(
                        "Redis connection failed, continuing without cache"
                    )

            # Start metrics collection
            if self.metrics_collector:
                self.metrics_collector.start_collection()

            # Start load balancer in separate thread
            if self.load_balancer:
                self.load_balancer_thread = threading.Thread(
                    target=self.load_balancer.start, daemon=True
                )
                self.load_balancer_thread.start()
                self.logger.info("Load balancer started")

            # Start HTTP server
            if self.http_server:
                self.logger.info(
                    f"Starting HTTP server on {self.settings.http_host}:{self.settings.http_port}"
                )
                await self.http_server.serve()

        except Exception as e:
            self.logger.error(f"Failed to start TACoreService: {e}")
            await self.stop()
            raise

    async def stop(self):
        """Stop the service."""
        try:
            self.running = False

            self.logger.info("Stopping TACoreService...")

            # Stop HTTP server
            if self.http_server:
                self.http_server.should_exit = True
                self.logger.info("HTTP server stopped")

            # Stop load balancer
            if self.load_balancer:
                self.load_balancer.stop()

                if self.load_balancer_thread:
                    self.load_balancer_thread.join(timeout=10)

                self.logger.info("Load balancer stopped")

            # Stop metrics collection
            if self.metrics_collector:
                self.metrics_collector.stop_collection()
                self.logger.info("Metrics collection stopped")

            # Close Redis connections
            if self.redis_manager and hasattr(self.redis_manager, "close"):
                if asyncio.iscoroutinefunction(self.redis_manager.close):
                    await self.redis_manager.close()
                else:
                    self.redis_manager.close()
                self.logger.info("Redis connections closed")

            self.logger.info("TACoreService stopped successfully")

        except Exception as e:
            self.logger.error(f"Error stopping TACoreService: {e}")


def setup_signal_handlers(service: TACoreService):
    """Setup signal handlers for graceful shutdown."""

    def signal_handler(signum, frame):
        print(f"\nReceived signal {signum}, shutting down gracefully...")
        asyncio.create_task(service.stop())

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


async def main():
    """Main application entry point."""
    service = TACoreService()

    try:
        # Setup service
        service.setup()

        # Setup signal handlers
        setup_signal_handlers(service)

        # Start service
        await service.start()

    except KeyboardInterrupt:
        print("\nReceived keyboard interrupt")
    except Exception as e:
        logging.error(f"Fatal error: {e}")
        sys.exit(1)
    finally:
        await service.stop()


if __name__ == "__main__":
    # Run the service
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nService interrupted by user")
    except Exception as e:
        print(f"Fatal error: {e}")
<<<<<<< HEAD
        sys.exit(1)
=======
        sys.exit(1)
>>>>>>> 4d5ab11 (chore: init repo (private) [skip ci])
