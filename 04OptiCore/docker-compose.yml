# NeuroTrade Nexus (NTN) - 策略优化模组 Docker Compose 配置
# Strategy Optimization Module Docker Compose Configuration

services:
  # 策略优化模组主服务
  opticore:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ntn-opticore:latest
    container_name: ntn-opticore
    restart: unless-stopped
    ports:
      - "8000:8000"    # FastAPI HTTP端口
      - "5555:5555"    # ZMQ订阅端口
      - "5556:5556"    # ZMQ发布端口
    environment:
      - NTN_ENVIRONMENT=production
      - DATABASE_PATH=/app/data/opticore.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - ZMQ_SUBSCRIBER_PORT=5555
      - ZMQ_PUBLISHER_PORT=5556
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
      - ENABLE_CORS=true
      - ENABLE_DOCS=false  # 生产环境关闭API文档
    volumes:
      - opticore_data:/app/data
      - opticore_logs:/app/logs
      - opticore_cache:/app/cache
      - ./config:/app/config:ro  # 只读配置文件
    depends_on:
      - redis
      - postgres
    # networks:
    #   - ntn-network
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: ntn-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    # networks:
    #   - ntn-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M

  # PostgreSQL数据库服务（可选，用于生产环境）
  postgres:
    image: postgres:15-alpine
    container_name: ntn-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ntn_opticore
      - POSTGRES_USER=ntn_user
      - POSTGRES_PASSWORD=ntn_secure_password_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    # networks:
    #   - ntn-network
    # secrets:
    #   - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ntn_user -d ntn_opticore"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: ntn-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - opticore
    # networks:
    #   - ntn-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Prometheus监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: ntn-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    # networks:
    #   - ntn-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Grafana可视化服务
  grafana:
    image: grafana/grafana:latest
    container_name: ntn-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    # networks:
    #   - ntn-network
    secrets:
      - grafana_password
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  # 日志聚合服务（可选）
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ntn-fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_logs:/var/log/fluentd
    # networks:
    #   - ntn-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# 网络配置
# networks:
#   ntn-network:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  opticore_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  opticore_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  opticore_cache:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  fluentd_logs:
    driver: local

# 密钥配置
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

# =================================================================
# 多环境部署说明
# =================================================================
# 开发环境: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
# 测试环境: docker-compose -f docker-compose.yml -f docker-compose.test.yml up --abort-on-container-exit
# 生产环境: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

# =================================================================
# 常用命令
# =================================================================
# 构建镜像: docker-compose build
# 启动服务: docker-compose up -d
# 停止服务: docker-compose down
# 查看日志: docker-compose logs -f opticore
# 查看状态: docker-compose ps
# 扩容服务: docker-compose up -d --scale opticore=3
# 更新服务: docker-compose pull && docker-compose up -d
# 清理资源: docker system prune -a

# =================================================================
# 监控和维护
# =================================================================
# 健康检查: docker-compose ps
# 资源使用: docker stats
# 数据备份: docker run --rm -v ntn_postgres_data:/data -v $(pwd):/backup alpine tar czf /backup/postgres_backup.tar.gz -C /data .
# 日志轮转: docker-compose logs --tail=1000 opticore > opticore.log