# NeuroTrade Nexus (NTN) - 策略优化模组生产环境配置
# Strategy Optimization Module Production Environment Configuration

services:
  # 策略优化模组生产服务
  opticore:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: ntn-opticore:latest
    restart: unless-stopped
    environment:
      - NTN_ENVIRONMENT=production
      - LOG_LEVEL=WARNING
      - ENABLE_DOCS=false  # 生产环境关闭API文档
      - MAX_WORKERS=8
      - ENABLE_CORS=false  # 生产环境关闭CORS
    networks:
      - ntn-prod-network
    deploy:
      # replicas: 2  # 注释掉replicas以避免与container_name冲突
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        order: stop-first
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        labels: "service=opticore,environment=production"

  # Redis生产配置
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --save 900 1
      --save 300 10
      --save 60 10000
    networks:
      - ntn-prod-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # PostgreSQL生产配置
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ntn_opticore
      - POSTGRES_USER=ntn_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    networks:
      - ntn-prod-network
    secrets:
      - postgres_password
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ntn_user -d ntn_opticore"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Nginx反向代理生产配置
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
    depends_on:
      - opticore
    networks:
      - ntn-prod-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Prometheus监控生产配置
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    networks:
      - ntn-prod-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Grafana可视化生产配置
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=monitoring.ntn.local
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.company.com:587
      - GF_SMTP_USER=grafana@company.com
      - GF_SMTP_PASSWORD_FILE=/run/secrets/grafana_smtp_password
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - ntn-prod-network
    secrets:
      - grafana_password
      - grafana_smtp_password
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

# 网络配置
networks:
  ntn-prod-network:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.23.0.0/16
    driver_opts:
      encrypted: "true"

# 数据卷配置
volumes:
  opticore_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ntn/data
  opticore_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ntn/logs
  opticore_prod_cache:
    driver: local
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ntn/redis
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ntn/postgres
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ntn/prometheus
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ntn/grafana
  nginx_prod_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ntn/nginx/logs

# 密钥配置
secrets:
  postgres_password:
    external: true
    name: ntn_postgres_password
  grafana_password:
    external: true
    name: ntn_grafana_password
  grafana_smtp_password:
    external: true
    name: ntn_grafana_smtp_password