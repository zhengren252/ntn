[tool:pytest]
# NeuroTrade Nexus (NTN) - 策略优化模组测试配置
# Pytest Configuration for Strategy Optimization Module

# 测试发现配置
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 最小版本要求
minversion = 6.0

# 添加选项
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=optimizer
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10
    --maxfail=5
    -ra

# 标记定义
markers =
    unit: 单元测试
    integration: 集成测试
    e2e: 端到端测试
    slow: 慢速测试
    fast: 快速测试
    backtest: 回测相关测试
    optimization: 优化相关测试
    decision: 决策相关测试
    communication: 通信相关测试
    risk: 风险管理相关测试
    database: 数据库相关测试
    cache: 缓存相关测试
    api: API相关测试
    mock: 模拟测试
    real: 真实环境测试
    dev: 开发环境测试
    staging: 预发布环境测试
    prod: 生产环境测试
    performance: 性能测试
    stress: 压力测试
    security: 安全测试
    regression: 回归测试
    smoke: 冒烟测试

# 测试会话配置
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true

# 日志配置
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# 过滤警告
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning
    error::pytest.PytestUnraisableExceptionWarning

# 异步测试配置
asyncio_mode = auto

# 并发配置
# 使用 pytest-xdist 进行并行测试
# 运行时使用: pytest -n auto

# 环境变量
env =
    NTN_ENVIRONMENT = test
    PYTHONPATH = .
    TESTING = 1

# 测试数据目录
testmon_datafile = .testmondata

# 缓存配置
cache_dir = .pytest_cache

# 覆盖率配置
[coverage:run]
source = optimizer
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */.venv/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml