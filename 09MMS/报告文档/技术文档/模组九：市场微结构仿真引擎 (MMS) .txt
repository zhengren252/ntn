手册导读

致项目经理: 本手册是为分布式团队协作而设计的。请将本模板作为“第一部分”分发给所有新模组的开发人员，并将“第二部分”（即各模组独立的详细开发套件）分发给相应的开发团队 。


致开发人员: 请首先仔细阅读本模板以理解项目最新的全局架构和通用规范 。然后，再深入研究您负责的模组在“第二部分”中的具体开发套件，那将是您日常开发工作的核心指南 。

1. 核心设计理念 (V1.1版)

口语化说明: 这份蓝图是我们整个项目的顶层设计。核心思想是“化整为零，分而治之” 。我们把一个复杂的交易系统，拆分成12个（未来将扩展至14个）可以独立开发、测试和升级的“积木块”（模组） 。它们之间通过一个高效的“信使系统”（ZeroMQ消息总线）来沟通，既能协同作战，又互不干扰 。




核心架构升级: 与项目初期不同，系统的核心AI能力（如市场扫描、订单执行）已被统一封装在模组十二：TACoreService中 。所有业务模组不再直接依赖


TradingAgents-CN库，而是通过网络请求调用这个中央服务 。这种服务化的方式极大地提升了系统的稳定性、可维护性和扩展性 。


2. 统一技术选型 (V1.1版)
以下是项目当前阶段的最终技术选型，所有新模组的开发都必须遵循此标准 ：



分类	技术/格式	模式/规范	用途描述
模块间通信	ZeroMQ	PUB/SUB, REQ/REP	
用于模组间的低延迟、高吞吐量异步消息传递 。

数据序列化	JSON	消息体必须包含 schema_version 字段	
确保高效、规范的数据交换，易于调试 。

缓存与状态存储	Redis	-	
用于存储实时状态、市场数据缓存、轻量级消息队列 。

持久化存储	SQLite	-	
零配置、文件型数据库，用于存储交易记录、回测报告等 。

部署与运维	Docker & Docker Compose	-	
实现一键式、跨环境的部署和隔离 。


核心AI库集成	TradingAgents-CN v3.0	服务化封装	
所有功能被封装在独立的

TACoreService模组中，对外提供统一服务 。


前端技术栈	React (Next.js)	Shadcn/UI, Zustand, TanStack Query	
用于构建现代化、高性能的前端管理界面 。



导出到 Google 表格
3. 全局规范与流程 (V1.1版)
3.1 系统核心工作流
随着

TACoreService和人工审核(ReviewGuard)模组的加入，系统标准的端到端交易流程已更新如下 ：

代码段

sequenceDiagram
    participant S as 扫描器
    participant TA as TACoreService
    participant O as 策略优化
    participant RG as 人工审核
    participant T as 交易员
    participant X as 风控/财务
    participant AF as API工厂
    S->>TA: req: scan.market
    TA-->>S: resp: opportunities
    S->>O: pub: new opportunity
    O->>RG: pub: strategy_package
    RG-->>T: pub: approved_trade
    T->>X: req: evaluate & apply_budget
    X-->>T: resp: approved
    T->>TA: req: execute.order
    TA-->>AF: call: place_order
    AF-->>TA: return: success
    TA-->>T: resp: success
3.2 数据隔离与环境管理规范
此规范保持不变，是所有开发活动必须严格遵守的基础准则。


环境定义: 系统必须包含三个环境：development, staging, production，通过环境变量APP_ENV进行切换 。



配置管理: 严禁硬编码敏感信息；使用分环境配置文件；通过Docker环境变量注入密钥 。



数据管理: 占位数据严禁入库到生产或测试环境；各环境使用独立的数据库；严禁将生产数据库直接拷贝到开发环境 。


3.3 开发与运维核心准则
所有模组的开发、维护和升级，都必须遵循以下核心准则：


版本控制: 严格遵循Git Flow分支模型。所有向develop或master分支的合并都必须通过Pull Request，并经过代码审查(Code Review) 。




向后兼容性: [最高优先级] 对模组间接口（ZeroMQ消息格式、HTTP API）的任何修改，都必须保持向后兼容 。




自动化测试: 所有新增的核心业务逻辑，都必须有相应的单元测试，代码覆盖率需达标（>80%） 。



自动化部署: 严禁手动登录生产服务器进行部署操作，所有部署必须通过CI/CD流水线完成 。


4. 通用开发者指南 (V1.1版)
4.1 系统总体架构
系统采用微服务架构，由12个（未来14个）高内聚、低耦合的独立模组构成 。各模组作为独立的Docker容器运行，通过ZeroMQ消息总线进行异步通信 。所有原先分散的AI交易功能，现已全部统一到

TACoreService中，各业务模组通过客户端请求该服务来完成任务 。


4.2 部署与集成规范 (升级后)
项目根目录的docker-compose.yml文件是集成所有模组的关键。一个适用于当前架构的示例如下，它展示了如何编排TACoreService的多个工作进程以及其他依赖模组：

YAML

version: '3.8'

services:
  # 基础服务
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  # 核心AI服务 (一个代理 + 多个工作进程)
  tacore_service:
    build: ./12TACoreService
    container_name: tacore_service
    command: python main.py  # 启动负载均衡代理
    ports:
      - "5555:5555" # 对其他模组暴露的前端端口
    networks:
      - app_net

  tacore_worker:
    build: ./12TACoreService
    command: python worker.py # 启动工作进程
    depends_on:
      - tacore_service
    networks:
      - app_net
    deploy:
      replicas: 4 # 轻松扩展工作进程数量

  # 业务模组示例 (以扫描器为例)
  scanner:
    build: ./03Scanner  # 假设模组文件夹为03Scanner
    environment:
      - APP_ENV=production
    depends_on:
      - redis
      - tacore_service # 明确依赖核心服务
    networks:
      - app_net

  # 新业务模组示例 (以人工审核为例)
  review_guard:
    build: ./10ReviewGuard
    environment:
      - APP_ENV=production
    depends_on:
      - redis
    networks:
      - app_net
    # ... 其他配置，如端口映射 ...

  # ... 其他所有模组的定义 ...

networks:
  app_net:

注意: 所有需要调用TACoreService的模组，都必须在其docker-compose.yml的服务定义中添加depends_on: [tacore_service]，以确保核心服务先于客户端启动 。
第二部分：各模组独立开发套件
（原有8个模组的开发套件保持不变，此处新增3个全新模组的开发套件）
模组九：市场微结构仿真引擎 (MMS) 开发套件
●9.1 模组概述: 您是系统的“虚拟现实”引擎。您不参与实盘交易流程，而是作为一个高级服务存在。您的核心职责是利用高度压缩的市场数据，提供一个比传统回测更逼真的仿真环境，用于压力测试和策略优化。其他模组（主要是策略优化器）会调用您来评估策略在各种模拟市场条件下的表现。
●9.2 接口契约 (Interaction Contracts)
○提供的服务 (Services Provided):
■服务类型: gRPC 或 HTTP/HTTPS RESTful API。
■服务地址: 在容器网络中为 http://mms:50051。
■核心端点: POST /simulate
■请求数据结构: {"symbol": "BTCUSDT", "period": "30d", "scenario": "black_swan", "strategy_params": {...}}
■响应数据结构: {"slippage": 0.0015, "fill_probability": 0.98, "price_impact": 0.0005, "report_url": "..."}
○调用的服务 (Services Consumed):
■服务: API统一管理工厂 或直接访问数据库。
■目的: 获取用于校准模型的实盘交易数据和历史行情数据。
●9.3 需求书、实施计划、搭建规范: （根据您提供的《市场微结构仿真引擎.docx》方案，已为其生成了符合全局规范的详细表格，此处省略）