# 市场微结构仿真引擎 (MMS) Docker Compose配置
# 用于多服务编排和开发环境部署

version: '3.8'

services:
  # Redis缓存服务 (使用外部服务)
  # redis:
  #   external: true

  # MMS API服务
  mms-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: mms-api
    restart: unless-stopped
    ports:
      - "8004:8000"
    environment:
      - APP_ENV=production
      - DATABASE_URL=sqlite:///app/data/mms.db
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=ntn_redis_2024
      - ZMQ_FRONTEND_PORT=5555
      - ZMQ_BACKEND_PORT=5556
      - ZMQ_MONITOR_PORT=5557
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config/config.yaml:/app/config/config.yaml:ro
    # depends_on:
    #   redis:
    #     condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mms-network

  # MMS负载均衡器
  mms-balancer:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: mms-balancer
    restart: unless-stopped
    ports:
      - "5555:5555"
      - "5556:5556"
      - "5557:5557"
    environment:
      - APP_ENV=production
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ZMQ_FRONTEND_PORT=5555
      - ZMQ_BACKEND_PORT=5556
      - ZMQ_MONITOR_PORT=5557
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./config/config.yaml:/app/config/config.yaml:ro
    # depends_on:
    #   redis:
    #     condition: service_healthy
    command: ["python", "scripts/start_services.py", "start", "--service", "balancer"]
    networks:
      - mms-network

  # MMS工作进程 (可扩展)
  mms-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - DATABASE_URL=sqlite:///app/data/mms.db
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ZMQ_FRONTEND_PORT=5555
      - ZMQ_BACKEND_PORT=5556
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config/config.yaml:/app/config/config.yaml:ro
    depends_on:
      # redis:
      #   condition: service_healthy
      mms-balancer:
        condition: service_started
    command: ["python", "scripts/start_services.py", "start", "--service", "worker"]
    networks:
      - mms-network
    deploy:
      replicas: 2

  # Nginx反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: mms-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - mms-api
    networks:
      - mms-network
    profiles:
      - production

  # Prometheus监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: mms-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mms-network
    profiles:
      - monitoring

  # Grafana仪表板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: mms-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - mms-network
    profiles:
      - monitoring

  # 日志聚合 (可选)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mms-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mms-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mms-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - mms-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: mms-logstash
    restart: unless-stopped
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - mms-network
    profiles:
      - logging

# 网络配置
networks:
  mms-network:
    external: true
    name: neurotradenexusntn_ntn_network

# 数据卷
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# 扩展配置
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"